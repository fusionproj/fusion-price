{"version":3,"sources":["today/today.js","history/history.js","App.js","serviceWorker.js","index.js"],"names":["Today","state","btcprice","ltcprice","ethprice","axios","get","then","response","setState","data","BTC","USD","localStorage","setItem","ETH","LTC","catch","error","console","log","navigator","onLine","this","getItem","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","bind","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","JSON","stringify","subtract","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","parse","App","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6eadc67a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./today.css\";\nimport axios from \"axios\";\nclass Today extends Component {\n  // Adds a class constructor that assigns the initial state values:\n  constructor() {\n    super();\n    this.state = {\n      btcprice: \"\",\n      ltcprice: \"\",\n      ethprice: \"\"\n    };\n  }\n  // This is called when an instance of a component is being created and inserted into the DOM.\n  componentWillMount() {\n    axios\n      .get(\n        \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\n      )\n      .then(response => {\n        // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n        this.setState({ btcprice: response.data.BTC.USD });\n        localStorage.setItem(\"BTC\", response.data.BTC.USD);\n\n        this.setState({ ethprice: response.data.ETH.USD });\n        localStorage.setItem(\"ETH\", response.data.ETH.USD);\n\n        this.setState({ ltcprice: response.data.LTC.USD });\n        localStorage.setItem(\"LTC\", response.data.LTC.USD);\n      })\n      // Catch any error here\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount(){\n    if (!navigator.onLine) {\n        this.setState({ btcprice: localStorage.getItem('BTC') });\n        this.setState({ ethprice: localStorage.getItem('ETH') });\n        this.setState({ ltcprice: localStorage.getItem('LTC') });\n    }\n  }\n  // The render method contains the JSX code which will be compiled to HTML.\n  render() {\n    return (\n      <div className=\"today--section container\">\n        <h2>Current Price</h2>\n        <div className=\"columns today--section__box\">\n          <div className=\"column btc--section\">\n            <h5>${this.state.btcprice}</h5>\n            <p>1 BTC</p>\n          </div>\n          <div className=\"column eth--section\">\n            <h5>${this.state.ethprice}</h5>\n            <p>1 ETH</p>\n          </div>\n          <div className=\"column ltc--section\">\n            <h5>${this.state.ltcprice}</h5>\n            <p>1 LTC</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Today;\n","import React, { Component } from 'react';\n    import './history.css'\n    import axios from 'axios'\n    import moment from 'moment'\n    \n    class History extends Component {\n        constructor () {\n          super();\n          this.state = {\n              todayprice: {},\n              yesterdayprice: {},\n              twodaysprice: {},\n              threedaysprice: {},\n              fourdaysprice: {}\n          }\n          this.getBTCPrices = this.getBTCPrices.bind(this);\n          this.getETHPrices = this.getETHPrices.bind(this);\n          this.getLTCPrices = this.getLTCPrices.bind(this);\n        }\n        // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n        getETHPrices (date) {\n            return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\n        }\n        // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n        getBTCPrices (date) {\n            return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\n        }\n        // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n        getLTCPrices (date) {\n            return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\n        }\n      // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data && eth.data.ETH?eth.data.ETH.USD:\"\",\n                    btc: btc.data && btc.data.BTC?btc.data.BTC.USD:\"\",\n                    ltc: ltc.data && ltc.data.ETH? ltc.data.LTC.USD:\"\"\n                }\n                // Set the state of todayprice to the content of the object f\n                localStorage.setItem('todayprice', JSON.stringify(f));\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data && eth.data.ETH?eth.data.ETH.USD:\"\",\n                    btc: btc.data && btc.data.BTC?btc.data.BTC.USD:\"\",\n                    ltc: ltc.data && ltc.data.ETH? ltc.data.LTC.USD:\"\"\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                localStorage.setItem('yesterdayprice', JSON.stringify(f));\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data && eth.data.ETH?eth.data.ETH.USD:\"\",\n                    btc: btc.data && btc.data.BTC?btc.data.BTC.USD:\"\",\n                    ltc: ltc.data && ltc.data.ETH? ltc.data.LTC.USD:\"\"\n                }\n                // Set the state of twodaysprice to the content of the object f\n                localStorage.setItem('twodaysprice', JSON.stringify(f));\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data && eth.data.ETH?eth.data.ETH.USD:\"\",\n                    btc: btc.data && btc.data.BTC?btc.data.BTC.USD:\"\",\n                    ltc: ltc.data && ltc.data.ETH? ltc.data.LTC.USD:\"\"\n                }\n                // Set the state of threedaysprice to the content of the object f\n                localStorage.setItem('threedaysprice', JSON.stringify(f));\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data && eth.data.ETH?eth.data.ETH.USD:\"\",\n                    btc: btc.data && btc.data.BTC?btc.data.BTC.USD:\"\",\n                    ltc: ltc.data && ltc.data.ETH? ltc.data.LTC.USD:\"\"\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                localStorage.setItem('fourdaysprice', JSON.stringify(f));\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n      \n      \nrender() {\n            return (\n                <div className=\"history--section container\">\n                    <h2>History (Past 5 days)</h2>\n                    <div className=\"history--section__box\">\n                        <div className=\"history--section__box__inner\">\n                            <h4>{this.state.todayprice.date}</h4>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <p>1 BTC = ${this.state.todayprice.btc}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 ETH = ${this.state.todayprice.eth}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 LTC = ${this.state.todayprice.ltc}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"history--section__box__inner\">\n                            <h4>{this.state.yesterdayprice.date}</h4>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"history--section__box__inner\">\n                            <h4>{this.state.twodaysprice.date}</h4>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <p>1 BTC = ${this.state.twodaysprice.btc}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 ETH = ${this.state.twodaysprice.eth}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"history--section__box__inner\">\n                            <h4>{this.state.threedaysprice.date}</h4>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <p>1 BTC = ${this.state.threedaysprice.btc}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 ETH = ${this.state.threedaysprice.eth}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"history--section__box__inner\">\n                            <h4>{this.state.fourdaysprice.date}</h4>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                    <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\n                                </div>\n                                <div className=\"column\">\n                                    <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    export default History;","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the Today component to be used below\nimport Today from './today/today'\n// Import the History component to be used below\nimport History from './history/history'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n          <div className=\"topheader\">\n              <header className=\"container\">\n                  <nav className=\"navbar\">\n                      <div className=\"navbar-brand\">\n                          <span className=\"navbar-item\">Fusion Push Coins</span>\n                      </div>\n                      <div className=\"navbar-end\">\n                          <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Fusion</a>\n                      </div>\n                  </nav>\n              </header>\n          </div>\n          <section className=\"results--section\">\n              <div className=\"container\">\n                  <h1>Fusion is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n              </div>\n              <div className=\"results--section__inner\">\n                  <Today />\n                  <History />\n              </div>\n          </section>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}